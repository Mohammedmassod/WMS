// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WMS.Data;

#nullable disable

namespace WMS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Directorate", b =>
                {
                    b.Property<int>("DirectorateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorateId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirectorateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.HasKey("DirectorateId");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Directorates");

                    b.HasData(
                        new
                        {
                            DirectorateId = 1,
                            CreatedDate = new DateTime(2023, 6, 26, 4, 25, 5, 682, DateTimeKind.Local).AddTicks(835),
                            DirectorateName = "الامانة",
                            GovernorateId = 1
                        });
                });

            modelBuilder.Entity("Governorate", b =>
                {
                    b.Property<int>("GovernorateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GovernorateId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GovernorateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GovernorateId");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            GovernorateId = 1,
                            CreatedDate = new DateTime(2023, 6, 26, 4, 25, 5, 682, DateTimeKind.Local).AddTicks(788),
                            GovernorateName = "صنعاء"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4a2e1650-21bd-4e67-832e-2e99c267a2e4",
                            RoleId = "2d5ef183-2290-4248-8b9c-b2b3486fa99b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WMS.Models.AttachedDocument", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"), 1L, 1);

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId")
                        .HasName("PK__Attached__1ABEEF6F64994F65");

                    b.HasIndex("RequestId");

                    b.ToTable("AttachedDocuments");
                });

            modelBuilder.Entity("WMS.Models.CheckCondition", b =>
                {
                    b.Property<int>("CheckConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckConditionId"), 1L, 1);

                    b.Property<bool>("Ars")
                        .HasColumnType("bit");

                    b.Property<bool>("Aspgp")
                        .HasColumnType("bit");

                    b.Property<bool>("Cdp")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirectorateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Dpsar")
                        .HasColumnType("bit");

                    b.Property<string>("GovernorateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hcsw")
                        .HasColumnType("bit");

                    b.Property<bool>("Ifr")
                        .HasColumnType("bit");

                    b.Property<bool>("Ivee")
                        .HasColumnType("bit");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<bool>("Lrc")
                        .HasColumnType("bit");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int>("Refe")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<bool>("Slpr")
                        .HasColumnType("bit");

                    b.Property<bool>("Ssi")
                        .HasColumnType("bit");

                    b.Property<bool>("Tmd")
                        .HasColumnType("bit");

                    b.Property<bool>("Tr4")
                        .HasColumnType("bit");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tvp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Vca")
                        .HasColumnType("bit");

                    b.HasKey("CheckConditionId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RequestId");

                    b.HasIndex("TraderId");

                    b.ToTable("CheckConditions");
                });

            modelBuilder.Entity("WMS.Models.CommercialRegistry", b =>
                {
                    b.Property<int>("CommercialRegistryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommercialRegistryId"), 1L, 1);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RegistryCategory")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RegistryNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("RegistryStatus")
                        .HasColumnType("bit");

                    b.Property<string>("RegistryType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.HasKey("CommercialRegistryId");

                    b.HasIndex("TraderId");

                    b.ToTable("CommercialRegistry");
                });

            modelBuilder.Entity("WMS.Models.ImportedDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<int>("MonitoringId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringId");

                    b.ToTable("ImportedDetails");
                });

            modelBuilder.Entity("WMS.Models.InventoryMonitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DirectorateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GovernorateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("MovementId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("TypePackaging")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("UnitStrength")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MovementId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("SectorId");

                    b.HasIndex("StoreId");

                    b.ToTable("InventoryMonitoring");
                });

            modelBuilder.Entity("WMS.Models.InventoryMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MovementName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.ToTable("InventoryMovements");
                });

            modelBuilder.Entity("WMS.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RequestId");

                    b.HasIndex("TraderId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("WMS.Models.InvoiceType", b =>
                {
                    b.Property<int>("InvoiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceTypeId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("InvoiceTypeId");

                    b.HasIndex("OfficeId");

                    b.ToTable("InvoiceTypes");
                });

            modelBuilder.Entity("WMS.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"), 1L, 1);

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ComingQuantity")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("(suser_sname())");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ItemGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("ItemSize")
                        .HasColumnType("float");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaxLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OriginCountryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProducedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int?>("SoldQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("StorageConditionId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ItemId");

                    b.HasIndex("ItemGroupId");

                    b.HasIndex("OriginCountryId");

                    b.HasIndex("SectorId");

                    b.HasIndex("TypeId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("WMS.Models.ItemGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("Ranking")
                        .HasColumnType("int")
                        .HasColumnName("ranking");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__ItemGrou__149AF30A9218EF8D");

                    b.HasIndex("ParentGroupId");

                    b.HasIndex("SectorId");

                    b.ToTable("ItemGroups");
                });

            modelBuilder.Entity("WMS.Models.ItemType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TypeId")
                        .HasName("PK__ItemType__516F039560DB38DE");

                    b.HasIndex("SectorId");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("WMS.Models.ItemUnit", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "UnitId")
                        .HasName("PK__ItemUnit__3631DD228AA6F4D0");

                    b.HasIndex("UnitId");

                    b.ToTable("ItemUnits");
                });

            modelBuilder.Entity("WMS.Models.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("DirectorateId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("GovernorateId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("OfficeId");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("SectorId");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            OfficeId = 1,
                            Address = "الحصبة",
                            DirectorateId = 1,
                            GovernorateId = 1,
                            OfficeName = "الغرفة التجارية",
                            SectorId = 1
                        });
                });

            modelBuilder.Entity("WMS.Models.OriginCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("CountryId")
                        .HasName("PK__OriginCo__10D160BF55275967");

                    b.HasIndex("SectorId");

                    b.ToTable("OriginCountries");
                });

            modelBuilder.Entity("WMS.Models.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("OwnerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("WMS.Models.Packaging", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.HasIndex("UnitId");

                    b.ToTable("Packaging");
                });

            modelBuilder.Entity("WMS.Models.PackingStore", b =>
                {
                    b.Property<int>("PackingStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackingStoreId"), 1L, 1);

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionLineCapacity")
                        .HasColumnType("int");

                    b.Property<int>("ProductionLineCount")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.HasKey("PackingStoreId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TraderId");

                    b.ToTable("PackingStore");
                });

            modelBuilder.Entity("WMS.Models.PaymentReceipt", b =>
                {
                    b.Property<int>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptId"), 1L, 1);

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.HasKey("ReceiptId")
                        .HasName("PK__PaymentR__CC08C400DAD92670");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RequestId");

                    b.HasIndex("TraderId");

                    b.ToTable("PaymentReceipts");
                });

            modelBuilder.Entity("WMS.Models.ProductPricing", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("PackagingId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackagingId");

                    b.HasIndex("SectorId");

                    b.HasIndex("UnitId");

                    b.HasIndex(new[] { "ItemId" }, "IX_ProductPricing_ItemID");

                    b.ToTable("ProductPricing");
                });

            modelBuilder.Entity("WMS.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<string>("DirectorateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FeeWaived")
                        .HasColumnType("bit");

                    b.Property<string>("GovernorateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<string>("StorMode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StorType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("TraderId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("WMS.Models.RestrictedLicense", b =>
                {
                    b.Property<int>("LicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicenseId"), 1L, 1);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.HasKey("LicenseId")
                        .HasName("PK__Restrict__72D600A2256DBE76");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RequestId");

                    b.HasIndex("TraderId");

                    b.ToTable("RestrictedLicenses");
                });

            modelBuilder.Entity("WMS.Models.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectorId"), 1L, 1);

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("SectorId");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            SectorId = 1,
                            Discription = "SuperAdmin",
                            SectorName = "صنعاء",
                            Status = false
                        });
                });

            modelBuilder.Entity("WMS.Models.StockItem", b =>
                {
                    b.Property<int>("StockItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockItemId"), 1L, 1);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SystemDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TypeStockItem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("StockItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("StoreId");

                    b.ToTable("StockItem");
                });

            modelBuilder.Entity("WMS.Models.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageId"), 1L, 1);

                    b.Property<string>("BuildingType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("ItemStorageConditions")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<int>("NumberOpen")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<double>("SizeItem")
                        .HasColumnType("float");

                    b.Property<int>("StorageCapacity")
                        .HasColumnType("int");

                    b.Property<int>("StorageVolume")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("StoreStorageConditions")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("StorageId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TraderId");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("WMS.Models.StorageCondition", b =>
                {
                    b.Property<int>("StorageConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageConditionId"), 1L, 1);

                    b.Property<decimal>("HeatLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HumidityLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IlluminationLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<bool>("MenusAndLightSlots")
                        .HasColumnType("bit");

                    b.Property<bool>("SpeciesStorage")
                        .HasColumnType("bit");

                    b.Property<string>("StorageType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("StorageConditionId");

                    b.HasIndex("ItemId");

                    b.ToTable("StorageConditions");
                });

            modelBuilder.Entity("WMS.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"), 1L, 1);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NextTo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StoreType")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.HasKey("StoreId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RequestId");

                    b.HasIndex("TraderId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("WMS.Models.TaxId", b =>
                {
                    b.Property<int>("TaxId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxId1"), 1L, 1);

                    b.Property<DateTime>("DateLastRenewal")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int>("TaxIdNumber")
                        .HasColumnType("int");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.HasKey("TaxId1")
                        .HasName("PK__TaxID__711BE08C1D2F6CA6");

                    b.HasIndex("OfficeId");

                    b.HasIndex("TraderId");

                    b.HasIndex(new[] { "TaxIdNumber" }, "UQ__TaxID__14068BFD276D7E67")
                        .IsUnique();

                    b.ToTable("TaxID");
                });

            modelBuilder.Entity("WMS.Models.Trader", b =>
                {
                    b.Property<int>("TraderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TraderId"), 1L, 1);

                    b.Property<DateTime>("IssuanceDateId")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuingAuthorityId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("NumberId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<bool>("StatusId")
                        .HasColumnType("bit");

                    b.Property<string>("TraderName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TraderId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("SectorId");

                    b.HasIndex(new[] { "NumberId" }, "UQ__Traders__FF1D98271D41B72A")
                        .IsUnique();

                    b.ToTable("Traders");
                });

            modelBuilder.Entity("WMS.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("WMS.Models.Roles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Name_Ar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Roles");

                    b.HasData(
                        new
                        {
                            Id = "e420ab41-8204-4604-a5bd-ca77e88def9c",
                            ConcurrencyStamp = "f26b6c27-1938-43b4-a519-c264e04848d0",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN",
                            Name_Ar = "مالك النظام"
                        },
                        new
                        {
                            Id = "2d5ef183-2290-4248-8b9c-b2b3486fa99b",
                            ConcurrencyStamp = "817f2428-b6bc-4840-9154-5d1fa80335ab",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Name_Ar = "مدير النظام"
                        },
                        new
                        {
                            Id = "e0134b31-3f25-465a-9eed-c8d07e430668",
                            ConcurrencyStamp = "13a680df-816d-4306-bff4-78f7599763a1",
                            Name = "User",
                            NormalizedName = "USER",
                            Name_Ar = "مستخدم"
                        });
                });

            modelBuilder.Entity("WMS.Models.Users", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("DirectorateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GovernorateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClient")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int")
                        .HasColumnName("OfficeId");

                    b.Property<string>("Pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("OfficeId");

                    b.HasDiscriminator().HasValue("Users");

                    b.HasData(
                        new
                        {
                            Id = "4a2e1650-21bd-4e67-832e-2e99c267a2e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d44dbce7-b143-473b-baa6-f4ec151258d6",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPiC8U1Hacmpt/nWi6aKYUz4LLXksJZ+ZfHgZiStG5UN+30dQkw5Zigk+PyhODxDWw==",
                            PhoneNumber = "778877887",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59aabb9c-a2ac-443b-8072-d9e5cfa17819",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin",
                            IsClient = true,
                            Name = "رئيس مجلس الادارة",
                            OfficeId = 1,
                            Pass = "Admin123"
                        });
                });

            modelBuilder.Entity("Directorate", b =>
                {
                    b.HasOne("Governorate", "Governorate")
                        .WithMany("Directorates")
                        .HasForeignKey("GovernorateId")
                        .IsRequired()
                        .HasConstraintName("Governorate_Directorates");

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WMS.Models.AttachedDocument", b =>
                {
                    b.HasOne("WMS.Models.Request", "Request")
                        .WithMany("AttachedDocuments")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("Requests_AttachedDocuments");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("WMS.Models.CheckCondition", b =>
                {
                    b.HasOne("WMS.Models.RestrictedLicense", "License")
                        .WithMany("CheckConditions")
                        .HasForeignKey("LicenseId")
                        .IsRequired()
                        .HasConstraintName("RestrictedLicenses_CheckConditions");

                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("CheckConditions")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_CheckConditions");

                    b.HasOne("WMS.Models.Request", "Request")
                        .WithMany("CheckConditions")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("Requests_CheckConditions");

                    b.HasOne("WMS.Models.Trader", "Trader")
                        .WithMany("CheckConditions")
                        .HasForeignKey("TraderId")
                        .IsRequired()
                        .HasConstraintName("Traders_CheckConditions");

                    b.Navigation("License");

                    b.Navigation("Office");

                    b.Navigation("Request");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("WMS.Models.CommercialRegistry", b =>
                {
                    b.HasOne("WMS.Models.Trader", "Trader")
                        .WithMany("CommercialRegistries")
                        .HasForeignKey("TraderId")
                        .IsRequired()
                        .HasConstraintName("Traders_CommercialRegistry");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("WMS.Models.ImportedDetail", b =>
                {
                    b.HasOne("WMS.Models.InventoryMovement", "Monitoring")
                        .WithMany("ImportedDetails")
                        .HasForeignKey("MonitoringId")
                        .IsRequired()
                        .HasConstraintName("InventoryMonitoring_ImportedDetails");

                    b.Navigation("Monitoring");
                });

            modelBuilder.Entity("WMS.Models.InventoryMonitoring", b =>
                {
                    b.HasOne("WMS.Models.InventoryMovement", "Movement")
                        .WithMany("InventoryMonitorings")
                        .HasForeignKey("MovementId")
                        .IsRequired()
                        .HasConstraintName("InventoryMovements_InventoryMonitoring");

                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("InventoryMonitorings")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_InventoryMonitoring");

                    b.HasOne("WMS.Models.Sector", "Sector")
                        .WithMany("InventoryMonitorings")
                        .HasForeignKey("SectorId")
                        .IsRequired()
                        .HasConstraintName("Sectors_InventoryMonitoring");

                    b.HasOne("WMS.Models.Store", "Store")
                        .WithMany("InventoryMonitorings")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("Stores_InventoryMonitoring");

                    b.Navigation("Movement");

                    b.Navigation("Office");

                    b.Navigation("Sector");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("WMS.Models.InventoryMovement", b =>
                {
                    b.HasOne("WMS.Models.Sector", "Sector")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("SectorId")
                        .IsRequired()
                        .HasConstraintName("Sectors_InventoryMovements");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("WMS.Models.Invoice", b =>
                {
                    b.HasOne("WMS.Models.InvoiceType", "InvoiceType")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceTypeId")
                        .IsRequired()
                        .HasConstraintName("InvoiceTypes_Invoices");

                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("Invoices")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_Invoices");

                    b.HasOne("WMS.Models.Request", "Request")
                        .WithMany("Invoices")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("Requests_Invoices");

                    b.HasOne("WMS.Models.Trader", "Trader")
                        .WithMany("Invoices")
                        .HasForeignKey("TraderId")
                        .IsRequired()
                        .HasConstraintName("Traders_Invoices");

                    b.Navigation("InvoiceType");

                    b.Navigation("Office");

                    b.Navigation("Request");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("WMS.Models.InvoiceType", b =>
                {
                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("InvoiceTypes")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_InvoiceTypes");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("WMS.Models.Item", b =>
                {
                    b.HasOne("WMS.Models.ItemGroup", "ItemGroup")
                        .WithMany("Items")
                        .HasForeignKey("ItemGroupId")
                        .HasConstraintName("ItemGroups_Items");

                    b.HasOne("WMS.Models.OriginCountry", "OriginCountry")
                        .WithMany("Items")
                        .HasForeignKey("OriginCountryId")
                        .HasConstraintName("OriginCountries_Items");

                    b.HasOne("WMS.Models.Sector", "Sector")
                        .WithMany("Items")
                        .HasForeignKey("SectorId")
                        .IsRequired()
                        .HasConstraintName("Sectors_Items");

                    b.HasOne("WMS.Models.ItemType", "Type")
                        .WithMany("Items")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("ItemTypes_Items");

                    b.Navigation("ItemGroup");

                    b.Navigation("OriginCountry");

                    b.Navigation("Sector");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("WMS.Models.ItemGroup", b =>
                {
                    b.HasOne("WMS.Models.ItemGroup", "ParentGroup")
                        .WithMany("InverseParentGroup")
                        .HasForeignKey("ParentGroupId")
                        .HasConstraintName("ItemGroups_ParentGroupID");

                    b.HasOne("WMS.Models.Sector", "Sector")
                        .WithMany("ItemGroups")
                        .HasForeignKey("SectorId")
                        .IsRequired()
                        .HasConstraintName("Sectors_ItemGroups");

                    b.Navigation("ParentGroup");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("WMS.Models.ItemType", b =>
                {
                    b.HasOne("WMS.Models.Sector", "Sector")
                        .WithMany("ItemTypes")
                        .HasForeignKey("SectorId")
                        .IsRequired()
                        .HasConstraintName("Sectors_ItemTypes");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("WMS.Models.ItemUnit", b =>
                {
                    b.HasOne("WMS.Models.Item", "Item")
                        .WithMany("ItemUnits")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("Items_ItemUnits");

                    b.HasOne("WMS.Models.Unit", "Unit")
                        .WithMany("ItemUnits")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("Units_ItemUnits");

                    b.Navigation("Item");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WMS.Models.Office", b =>
                {
                    b.HasOne("Directorate", "Directorate")
                        .WithMany("Offices")
                        .HasForeignKey("DirectorateId")
                        .IsRequired()
                        .HasConstraintName("Directorate_Offices");

                    b.HasOne("Governorate", "Governorate")
                        .WithMany("Offices")
                        .HasForeignKey("GovernorateId")
                        .IsRequired()
                        .HasConstraintName("Governorate_Offices");

                    b.HasOne("WMS.Models.Sector", "Sector")
                        .WithMany("Offices")
                        .HasForeignKey("SectorId")
                        .IsRequired()
                        .HasConstraintName("Sectors_Offices");

                    b.Navigation("Directorate");

                    b.Navigation("Governorate");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("WMS.Models.OriginCountry", b =>
                {
                    b.HasOne("WMS.Models.Sector", "Sector")
                        .WithMany("OriginCountries")
                        .HasForeignKey("SectorId")
                        .HasConstraintName("Sectors_OriginCountries");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("WMS.Models.Owner", b =>
                {
                    b.HasOne("WMS.Models.Store", "Store")
                        .WithMany("Owners")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("Stores_Owner");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("WMS.Models.Packaging", b =>
                {
                    b.HasOne("WMS.Models.Sector", "Sector")
                        .WithMany("Packagings")
                        .HasForeignKey("SectorId")
                        .IsRequired()
                        .HasConstraintName("Sectors_Packaging");

                    b.HasOne("WMS.Models.Unit", "Unit")
                        .WithMany("Packagings")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("Units_Packaging");

                    b.Navigation("Sector");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WMS.Models.PackingStore", b =>
                {
                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("PackingStores")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_PackingStore");

                    b.HasOne("WMS.Models.Request", "Request")
                        .WithMany("PackingStores")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("Requests_PackingStore");

                    b.HasOne("WMS.Models.Store", "Store")
                        .WithMany("PackingStores")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("Stores_PackingStore");

                    b.HasOne("WMS.Models.Trader", "Trader")
                        .WithMany("PackingStores")
                        .HasForeignKey("TraderId")
                        .IsRequired()
                        .HasConstraintName("Traders_PackingStore");

                    b.Navigation("Office");

                    b.Navigation("Request");

                    b.Navigation("Store");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("WMS.Models.PaymentReceipt", b =>
                {
                    b.HasOne("WMS.Models.Invoice", "Invoice")
                        .WithMany("PaymentReceipts")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("Invoices_PaymentReceipts");

                    b.HasOne("WMS.Models.InvoiceType", "InvoiceType")
                        .WithMany("PaymentReceipts")
                        .HasForeignKey("InvoiceTypeId")
                        .IsRequired()
                        .HasConstraintName("InvoiceTypes_PaymentReceipts");

                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("PaymentReceipts")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_PaymentReceipts");

                    b.HasOne("WMS.Models.Request", "Request")
                        .WithMany("PaymentReceipts")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("Requests_PaymentReceipts");

                    b.HasOne("WMS.Models.Trader", "Trader")
                        .WithMany("PaymentReceipts")
                        .HasForeignKey("TraderId")
                        .IsRequired()
                        .HasConstraintName("Traders_PaymentReceipts");

                    b.Navigation("Invoice");

                    b.Navigation("InvoiceType");

                    b.Navigation("Office");

                    b.Navigation("Request");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("WMS.Models.ProductPricing", b =>
                {
                    b.HasOne("WMS.Models.Item", "Item")
                        .WithMany("ProductPricings")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("Items_ProductPricing");

                    b.HasOne("WMS.Models.Packaging", "Packaging")
                        .WithMany("ProductPricings")
                        .HasForeignKey("PackagingId")
                        .IsRequired()
                        .HasConstraintName("Packaging_ProductPricing");

                    b.HasOne("WMS.Models.Sector", "Sector")
                        .WithMany("ProductPricings")
                        .HasForeignKey("SectorId")
                        .IsRequired()
                        .HasConstraintName("Sectors_ProductPricing");

                    b.HasOne("WMS.Models.Unit", "Unit")
                        .WithMany("ProductPricings")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("Units_ProductPricing");

                    b.Navigation("Item");

                    b.Navigation("Packaging");

                    b.Navigation("Sector");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("WMS.Models.Request", b =>
                {
                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("Requests")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_Requests");

                    b.HasOne("WMS.Models.Trader", "Trader")
                        .WithMany("Requests")
                        .HasForeignKey("TraderId")
                        .IsRequired()
                        .HasConstraintName("Traders_Requests");

                    b.Navigation("Office");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("WMS.Models.RestrictedLicense", b =>
                {
                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("RestrictedLicenses")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_RestrictedLicenses");

                    b.HasOne("WMS.Models.Request", "Request")
                        .WithMany("RestrictedLicenses")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("Requests_RestrictedLicenses");

                    b.HasOne("WMS.Models.Trader", "Trader")
                        .WithMany("RestrictedLicenses")
                        .HasForeignKey("TraderId")
                        .IsRequired()
                        .HasConstraintName("Traders_RestrictedLicenses");

                    b.Navigation("Office");

                    b.Navigation("Request");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("WMS.Models.StockItem", b =>
                {
                    b.HasOne("WMS.Models.Item", "Item")
                        .WithMany("StockItems")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK_StockItem_Item");

                    b.HasOne("WMS.Models.Store", "Store")
                        .WithMany("StockItems")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_StockItem_Store");

                    b.Navigation("Item");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("WMS.Models.Storage", b =>
                {
                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("Storages")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_Storage");

                    b.HasOne("WMS.Models.Request", "Request")
                        .WithMany("Storages")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("Requests_Storage");

                    b.HasOne("WMS.Models.Store", "Store")
                        .WithMany("Storages")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("Stores_Storage");

                    b.HasOne("WMS.Models.Trader", "Trader")
                        .WithMany("Storages")
                        .HasForeignKey("TraderId")
                        .IsRequired()
                        .HasConstraintName("Traders_Storage");

                    b.Navigation("Office");

                    b.Navigation("Request");

                    b.Navigation("Store");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("WMS.Models.StorageCondition", b =>
                {
                    b.HasOne("WMS.Models.Item", "Item")
                        .WithMany("StorageConditions")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("Items_StorageConditions");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("WMS.Models.Store", b =>
                {
                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("Stores")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_Stores");

                    b.HasOne("WMS.Models.Request", "Request")
                        .WithMany("Stores")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("Requests_Stores");

                    b.HasOne("WMS.Models.Trader", "Trader")
                        .WithMany("Stores")
                        .HasForeignKey("TraderId")
                        .IsRequired()
                        .HasConstraintName("Traders_Stores");

                    b.Navigation("Office");

                    b.Navigation("Request");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("WMS.Models.TaxId", b =>
                {
                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("TaxIds")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_TaxID");

                    b.HasOne("WMS.Models.Trader", "Trader")
                        .WithMany("TaxIds")
                        .HasForeignKey("TraderId")
                        .IsRequired()
                        .HasConstraintName("Traders_TaxID");

                    b.Navigation("Office");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("WMS.Models.Trader", b =>
                {
                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("Traders")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_Traders");

                    b.HasOne("WMS.Models.Sector", "Sector")
                        .WithMany("Traders")
                        .HasForeignKey("SectorId")
                        .IsRequired()
                        .HasConstraintName("Sectors_Traders");

                    b.Navigation("Office");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("WMS.Models.Unit", b =>
                {
                    b.HasOne("WMS.Models.Sector", "Sector")
                        .WithMany("Units")
                        .HasForeignKey("SectorId")
                        .IsRequired()
                        .HasConstraintName("Sectors_Units");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("WMS.Models.Users", b =>
                {
                    b.HasOne("WMS.Models.Office", "Office")
                        .WithMany("Users")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("Offices_Users");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("Directorate", b =>
                {
                    b.Navigation("Offices");
                });

            modelBuilder.Entity("Governorate", b =>
                {
                    b.Navigation("Directorates");

                    b.Navigation("Offices");
                });

            modelBuilder.Entity("WMS.Models.InventoryMovement", b =>
                {
                    b.Navigation("ImportedDetails");

                    b.Navigation("InventoryMonitorings");
                });

            modelBuilder.Entity("WMS.Models.Invoice", b =>
                {
                    b.Navigation("PaymentReceipts");
                });

            modelBuilder.Entity("WMS.Models.InvoiceType", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("PaymentReceipts");
                });

            modelBuilder.Entity("WMS.Models.Item", b =>
                {
                    b.Navigation("ItemUnits");

                    b.Navigation("ProductPricings");

                    b.Navigation("StockItems");

                    b.Navigation("StorageConditions");
                });

            modelBuilder.Entity("WMS.Models.ItemGroup", b =>
                {
                    b.Navigation("InverseParentGroup");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("WMS.Models.ItemType", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WMS.Models.Office", b =>
                {
                    b.Navigation("CheckConditions");

                    b.Navigation("InventoryMonitorings");

                    b.Navigation("InvoiceTypes");

                    b.Navigation("Invoices");

                    b.Navigation("PackingStores");

                    b.Navigation("PaymentReceipts");

                    b.Navigation("Requests");

                    b.Navigation("RestrictedLicenses");

                    b.Navigation("Storages");

                    b.Navigation("Stores");

                    b.Navigation("TaxIds");

                    b.Navigation("Traders");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WMS.Models.OriginCountry", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WMS.Models.Packaging", b =>
                {
                    b.Navigation("ProductPricings");
                });

            modelBuilder.Entity("WMS.Models.Request", b =>
                {
                    b.Navigation("AttachedDocuments");

                    b.Navigation("CheckConditions");

                    b.Navigation("Invoices");

                    b.Navigation("PackingStores");

                    b.Navigation("PaymentReceipts");

                    b.Navigation("RestrictedLicenses");

                    b.Navigation("Storages");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("WMS.Models.RestrictedLicense", b =>
                {
                    b.Navigation("CheckConditions");
                });

            modelBuilder.Entity("WMS.Models.Sector", b =>
                {
                    b.Navigation("InventoryMonitorings");

                    b.Navigation("InventoryMovements");

                    b.Navigation("ItemGroups");

                    b.Navigation("ItemTypes");

                    b.Navigation("Items");

                    b.Navigation("Offices");

                    b.Navigation("OriginCountries");

                    b.Navigation("Packagings");

                    b.Navigation("ProductPricings");

                    b.Navigation("Traders");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("WMS.Models.Store", b =>
                {
                    b.Navigation("InventoryMonitorings");

                    b.Navigation("Owners");

                    b.Navigation("PackingStores");

                    b.Navigation("StockItems");

                    b.Navigation("Storages");
                });

            modelBuilder.Entity("WMS.Models.Trader", b =>
                {
                    b.Navigation("CheckConditions");

                    b.Navigation("CommercialRegistries");

                    b.Navigation("Invoices");

                    b.Navigation("PackingStores");

                    b.Navigation("PaymentReceipts");

                    b.Navigation("Requests");

                    b.Navigation("RestrictedLicenses");

                    b.Navigation("Storages");

                    b.Navigation("Stores");

                    b.Navigation("TaxIds");
                });

            modelBuilder.Entity("WMS.Models.Unit", b =>
                {
                    b.Navigation("ItemUnits");

                    b.Navigation("Packagings");

                    b.Navigation("ProductPricings");
                });
#pragma warning restore 612, 618
        }
    }
}
